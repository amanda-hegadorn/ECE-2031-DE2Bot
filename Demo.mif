-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2801;  -- 	JUMP   Init
           001 : 09E9;  -- 	LOAD   Zero
           002 : 108A;  -- 	STORE  RVEL
           003 : 1082;  -- 	STORE  LVEL ;initialize to 0
           004 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           005 : 988B;  -- 	OUT    RVELCMD
           006 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           007 : 8104;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           008 : 80E6;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           009 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00A : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           00B : 49FA;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00C : 3812;  -- 	JPOS   WaitForUser ; If readeltaY, jump to wait for PB3
           00D : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00E : 49F7;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00F : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           010 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           011 : 280A;  -- 	JUMP   WaitForSafety
           012 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           013 : 49F7;  -- 	AND    Mask1
           014 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           015 : 10CB;  -- 	STORE  Temp        ; (overkill, but looks nice)
           016 : 6001;  -- 	SHIFT  1
           017 : 50CB;  -- 	OR     Temp
           018 : 9807;  -- 	OUT    XLEDS
           019 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01A : 49F8;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           01B : 3812;  -- 	JPOS   WaitForUser ; not readeltaY (KEYs are active-low, hence JPOS)
           01C : 09E9;  -- 	LOAD   Zero
           01D : 9807;  -- 	OUT    XLEDS       ; clear LEDs once readeltaY to continue
           01E : 98C3;  -- 	OUT    RESETPOS    ; reset odometry in case wheels moved after programming
           01F : BD00;  -- 	LOADI &H0500
           020 : 10C3;  -- 	STORE pX
           021 : BD0C;  -- 	LOADI &H050C
           022 : 10C4;  -- 	STORE pY
           023 : 08C2;  -- 	LOAD N 
           024 : 6FFC;  -- 	ADDI -4
           025 : 4084;  -- 	JZERO Die
           026 : 70C3;  -- 	ILOAD pX
           027 : 10BE;  -- 	STORE DesX
           028 : 70C4;  -- 	ILOAD pY
           029 : 10BF;  -- 	STORE DesY
           02A : 08C3;  -- 	LOAD pX 
           02B : 19EA;  -- 	ADD  One
           02C : 10C3;  -- 	STORE pX
           02D : 08C4;  -- 	LOAD pY 
           02E : 19EA;  -- 	ADD  One
           02F : 10C4;  -- 	STORE pY
           030 : 08C2;  -- 	LOAD  N
           031 : 6801;  -- 	ADDI  1
           032 : 10C2;  -- 	STORE N
           033 : 9806;  -- 	OUT LCD
           034 : 90C0;  -- 	IN XPOS;read IN X, IN Y
           035 : 10B9;  -- 	STORE CurrX
           036 : 9804;  -- 	OUT SSEG1
           037 : 90C1;  -- 	IN YPOS
           038 : 10BA;  -- 	STORE CurrY
           039 : 9805;  -- 	OUT SSEG2
           03A : 08BE;  -- 	LOAD  DesX
           03B : 20B9;  -- 	SUB   CurrX
           03C : 10BC;  -- 	STORE deltaX
           03D : 117B;  -- 	STORE AtanX
           03E : 08BF;  -- 	LOAD DesY
           03F : 20BA;  -- 	SUB  CurrY
           040 : 10BD;  -- 	STORE deltaY
           041 : 117C;  -- 	STORE AtanY
           042 : 08BD;  -- 	LOAD deltaY
           043 : 81E4;  -- 	CALL  Abs
           044 : 20C7;  -- 	SUB   DeadBand
           045 : 3847;  -- 	JPOS  Cont ;if it is not 0 or negative, continue
           046 : 2873;  -- 	JUMP  CheckDeadBand ; if it is 0 or negative, jump to check x
           047 : 811A;  -- 	CALL ATan2 ;call on the current deltaX and deltaY stored in atanx and atany
           048 : 10C1;  -- 	STORE DesTheta
           049 : 90C2;  -- 	IN    THETA
           04A : 10BB;  -- 	STORE CurrTheta
           04B : 08C1;  -- 	LOAD  DesTheta
           04C : 20BB;  -- 	SUB   CurrTheta
           04D : 80E0;  -- 	CALL  Mod360
           04E : 10C0;  -- 	STORE dTheta
           04F : 08C0;  -- Q1:	LOAD dTheta
           050 : 2203;  -- 	SUB Deg90
           051 : 3857;  -- 	JPOS Q2 ;jump to Quadrant 2 test
           052 : 08CA;  -- 	LOAD FullSpeed
           053 : 10C5;  -- 	STORE R ;R=250
           054 : 8093;  -- 	CALL  CALCL
           055 : 10C6;  -- 	STORE L ;result from calcLR in AC and in ResLR
           056 : 286E;  -- 	JUMP Set
           057 : 08C0;  -- 	LOAD dTheta
           058 : 2204;  -- 	SUB  Deg180
           059 : 3860;  -- 	JPOS Q3
           05A : 09E9;  -- 	LOAD ZERO
           05B : 20CA;  -- 	SUB FullSpeed
           05C : 10C6;  -- 	STORE L
           05D : 80A6;  -- 	CALL CALCR
           05E : 10C5;  -- 	STORE R
           05F : 286E;  -- 	JUMP Set
           060 : 0A06;  -- 	LOAD Deg360
           061 : 20C0;  -- 	SUB  dTheta
           062 : 10C0;  -- 	STORE dTheta
           063 : 1A03;  -- 	ADD  Deg90
           064 : 386A;  -- 	JPOS Q4
           065 : 08CA;  -- 	LOAD FullSpeed
           066 : 10C6;  -- 	STORE L
           067 : 80A6;  -- 	CALL  CALCR
           068 : 10C5;  -- 	STORE R ;result from calcLR in AC and in ResLR
           069 : 286E;  -- 	JUMP Set
           06A : 08CA;  -- 	LOAD FullSpeed
           06B : 10C6;  -- 	STORE L
           06C : 80A6;  -- 	CALL CALCR
           06D : 10C5;  -- 	STORE R
           06E : 08C5;  -- 	LOAD R
           06F : 988B;  -- 	OUT  RVELCMD
           070 : 08C6;  -- 	LOAD L
           071 : 9883;  -- 	OUT LVELCMD
           072 : 2834;  -- 	JUMP Process
           073 : 08BC;  -- 	Load deltaX
           074 : 81E4;  -- 	CALL Abs
           075 : 20C7;  -- 	SUB  DeadBand
           076 : 3078;  -- 	JNEG LIGHT
           077 : 2847;  -- 	JUMP Cont
           078 : 08CE;  -- 	LOAD  LedsOn
           079 : 6001;  --     SHIFT 1
           07A : 6801;  --     ADDI  1
           07B : 9807;  -- 	OUT XLEDS
           07C : 10CE;  --     STORE LedsOn
           07D : 09ED;  -- 	LOAD Four
           07E : 980A;  -- 	OUT  BEEP
           07F : 09EB;  -- 	LOAD Two
           080 : 80D6;  -- 	CALL WAITAC
           081 : 09E9;  -- 	LOAD ZERO
           082 : 980A;  -- 	OUT  BEEP
           083 : 2823;  -- 	JUMP Next
           084 : 09E9;  -- 	LOAD   ZERO         ; Stop everything.
           085 : 9883;  -- 	OUT    LVELCMD
           086 : 988B;  -- 	OUT    RVELCMD
           087 : 98B2;  -- 	OUT    SONAREN
           088 : 0892;  -- 	LOAD   DEAD         ; An indication that we are dead
           089 : 9806;  -- 	OUT		LCD
           08A : 90C0;  -- 	IN     XPOS
           08B : 9804;  -- 	OUT    SSEG1
           08C : 90C1;  -- 	IN     YPOS
           08D : 9805;  -- 	OUT    SSEG2
           08E : 80CF;  -- 	CALL   Wait1
           08F : 09E9;  -- 	LOAD   ZERO
           090 : 980A;  -- 	OUT    BEEP
           091 : 2891;  -- 	JUMP   Forever      ; Do this forever.
           092 : DEAD;  -- 	DEAD:  DW &HDEAD    ; Example of a "local" variable
           093 : 08CA;  -- 	LOAD FullSpeed 
           094 : 11A4;  -- 	STORE m16sA
           095 : 08C0;  -- 	LOAD  dTheta
           096 : 11A5;  -- 	STORE m16sB
           097 : 8181;  -- 	CALL  Mult16s
           098 : 09A8;  -- 	LOAD mres16sL ;only need low, bounds mean it will never be higher than max speed
           099 : 11DC;  -- 	STORE d16sN
           09A : 0A03;  -- 	LOAD Deg90
           09B : 11DD;  -- 	STORE d16sD
           09C : 81AA;  -- 	CALL  Div16s
           09D : 09E2;  -- 	LOAD dres16sQ
           09E : 81E4;  -- 	CALL ABS ; take ABS of AC
           09F : 10CB;  -- 	STORE temp
           0A0 : 08CA;  -- 	LOAD FullSpeed
           0A1 : 20CB;  -- 	SUB  temp
           0A2 : 6001;  -- 	SHIFT 1
           0A3 : 20CA;  -- 	SUB FullSpeed
           0A4 : 10C6;  -- 	STORE L
           0A5 : 8800;  -- 	RETURN 
           0A6 : 08CA;  -- 	LOAD FullSpeed
           0A7 : 11A4;  -- 	STORE m16sA
           0A8 : 08C0;  -- 	LOAD  dTheta
           0A9 : 11A5;  -- 	STORE m16sB
           0AA : 8181;  -- 	CALL  Mult16s
           0AB : 09A8;  -- 	LOAD mres16sL ;only need low, bounds mean it will never be higher than max speed
           0AC : 11DC;  -- 	STORE d16sN
           0AD : 0A03;  -- 	LOAD Deg90
           0AE : 11DD;  -- 	STORE d16sD
           0AF : 81AA;  -- 	CALL  Div16s
           0B0 : 09E2;  -- 	LOAD dres16sQ
           0B1 : 81E4;  -- 	CALL ABS ; take ABS of AC
           0B2 : 10CB;  -- 	STORE temp
           0B3 : 08CA;  -- 	LOAD FullSpeed
           0B4 : 20CB;  -- 	SUB  temp
           0B5 : 6001;  -- 	SHIFT 1
           0B6 : 20C6;  -- 	SUB L
           0B7 : 10C5;  -- 	STORE R
           0B8 : 8800;  -- 	RETURN 
           0B9 : 0000;  -- CurrX: dw 0 ;initialize current pos to 0
           0BA : 0000;  -- CurrY: dw 0 ; initialize current pos to 0
           0BB : 0000;  -- CurrTheta: dw 0
           0BC : 0000;  -- deltaX: dw 0
           0BD : 0000;  -- deltaY: dw 0
           0BE : 00F0;  -- DesX: dw &HF0
           0BF : 00F0;  -- DesY: dw &HF0
           0C0 : 0000;  -- dTheta: dw 0
           0C1 : 0000;  -- DesTheta: DW 0
           0C2 : 0000;  -- N: dw 0 ;This is the coordinate counter
           0C3 : 0000;  -- pX: DW 0
           0C4 : 0000;  -- pY: DW 0
           0C5 : 0000;  -- R: dw 0
           0C6 : 0000;  -- L: dw 0
           0C7 : 001E;  -- DeadBand: dw 30
           0C8 : 0489;  -- MaxDistX: dw 1161 
           0C9 : 05AB;  -- MaxDistY: dw 1451
           0CA : 0177;  -- FullSpeed: dw 375
           0CB : 0000;  -- Temp: dw 0 ;for random math
           0CC : 0000;  -- ResLR: dw 0
           0CD : 0000;  -- LEDMask: DW 0;
           0CE : 0000;  -- LedsOn: DW &B0000000000000000
           0CF : 10DF;  -- 	STORE AC
           0D0 : 9802;  -- 	OUT    TIMER
           0D1 : 9002;  -- 	IN     TIMER
           0D2 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           0D3 : 6FF6;  -- 	ADDI   -10         ; 1 second in 10Hz.
           0D4 : 30D1;  -- 	JNEG   Wloop
           0D5 : 8800;  -- 	RETURN
           0D6 : 10DE;  -- 	STORE  WaitTime
           0D7 : 9802;  -- 	OUT    Timer
           0D8 : 9002;  -- 	IN     Timer
           0D9 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           0DA : 20DE;  -- 	SUB    WaitTime
           0DB : 30D8;  -- 	JNEG   WACLoop
           0DC : 08DF;  -- 	LOAD AC
           0DD : 8800;  -- 	RETURN
           0DE : 0000;  -- 	WaitTime: DW 0     ; "local" variable.
           0DF : 0000;  -- 	AC: DW 0 ;stores current AC and restores
           0E0 : 30E3;  -- 	JNEG   M360N       ; loop exit condition
           0E1 : 6E98;  -- 	ADDI   -360        ; start removing 360 at a time
           0E2 : 28E0;  -- 	JUMP   Mod360      ; keep going until negative
           0E3 : 6968;  -- 	ADDI   360         ; get back to positive
           0E4 : 30E3;  -- 	JNEG   M360N       ; (keep adding 360 until non-negative)
           0E5 : 8800;  -- 	RETURN
           0E6 : 80FE;  -- 	CALL   GetBattLvl
           0E7 : 40E6;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           0E8 : 220F;  -- 	SUB    MinBatt
           0E9 : 30EC;  -- 	JNEG   DeadBatt
           0EA : 1A0F;  -- 	ADD    MinBatt     ; get original value back
           0EB : 8800;  -- 	RETURN
           0EC : 09ED;  -- 	LOAD   Four
           0ED : 980A;  -- 	OUT    BEEP        ; start beep sound
           0EE : 80FE;  -- 	CALL   GetBattLvl  ; get the battery level
           0EF : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           0F0 : 9805;  -- 	OUT    SSEG2
           0F1 : 9806;  -- 	OUT    LCD
           0F2 : 09E9;  -- 	LOAD   Zero
           0F3 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           0F4 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           0F5 : 9807;  -- 	OUT    XLEDS
           0F6 : 80CF;  -- 	CALL   Wait1       ; 1 second
           0F7 : 09E9;  -- 	Load   Zero
           0F8 : 980A;  -- 	OUT    BEEP        ; stop beeping
           0F9 : 09E9;  -- 	LOAD   Zero
           0FA : 9801;  -- 	OUT    LEDS        ; LEDs off
           0FB : 9807;  -- 	OUT    XLEDS
           0FC : 80CF;  -- 	CALL   Wait1       ; 1 second
           0FD : 28EC;  -- 	JUMP   DeadBatt    ; repeat forever
           0FE : 0A11;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           0FF : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           100 : 9892;  -- 	OUT    I2C_RdeltaY     ; start the communication
           101 : 810C;  -- 	CALL   BlockI2C    ; wait for it to finish
           102 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           103 : 8800;  -- 	RETURN
           104 : 810C;  -- 	CALL   BlockI2C    ; wait for idle
           105 : 0A10;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           106 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           107 : 09E9;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           108 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           109 : 9892;  -- 	OUT    I2C_RdeltaY     ; start the communication
           10A : 810C;  -- 	CALL   BlockI2C    ; wait for it to finish
           10B : 8800;  -- 	RETURN
           10C : 09E9;  -- 	LOAD   Zero
           10D : 10CB;  -- 	STORE  Temp        ; Used to check for timeout
           10E : 08CB;  -- 	LOAD   Temp
           10F : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           110 : 10CB;  -- 	STORE  Temp
           111 : 4115;  -- 	JZERO  I2CError    ; Timeout occurred; error
           112 : 9092;  -- 	IN     I2C_RdeltaY     ; Read busy signal
           113 : 390E;  -- 	JPOS   BI2CL       ; If not 0, try again
           114 : 8800;  -- 	RETURN             ; Else return
           115 : 09E9;  -- 	LOAD   Zero
           116 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           117 : 9804;  -- 	OUT    SSEG1
           118 : 9805;  -- 	OUT    SSEG2       ; display error message
           119 : 2915;  -- 	JUMP   I2CError
           11A : 097C;  -- 	LOAD   AtanY
           11B : 81E4;  -- 	CALL   Abs          ; abs(y)
           11C : 117E;  -- 	STORE  AtanT
           11D : 097B;  -- 	LOAD   AtanX        ; abs(x)
           11E : 81E4;  -- 	CALL   Abs
           11F : 217E;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           120 : 312B;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           121 : 097B;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           122 : 3128;  -- 	JNEG   A2_R3
           123 : 813C;  -- 	CALL   A2_calc      ; Octants 1, 8
           124 : 3126;  -- 	JNEG   A2_R1n
           125 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           126 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           127 : 8800;  -- 	RETURN
           128 : 813C;  -- 	CALL   A2_calc      ; Octants 4, 5            
           129 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           12A : 8800;  -- 	RETURN
           12B : 097C;  -- 	LOAD   AtanY        ; Swap input arguments
           12C : 117E;  -- 	STORE  AtanT
           12D : 097B;  -- 	LOAD   AtanX
           12E : 117C;  -- 	STORE  AtanY
           12F : 097E;  -- 	LOAD   AtanT
           130 : 117B;  -- 	STORE  AtanX
           131 : 3937;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           132 : 813C;  -- 	CALL   A2_calc      ; else octants 6, 7
           133 : 59E8;  -- 	XOR    NegOne
           134 : 6801;  -- 	ADDI   1            ; negate the angle
           135 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           136 : 8800;  -- 	RETURN
           137 : 813C;  -- 	CALL   A2_calc      ; Octants 2, 3
           138 : 59E8;  -- 	XOR    NegOne
           139 : 6801;  -- 	ADDI   1            ; negate the angle
           13A : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           13B : 8800;  -- 	RETURN
           13C : 097C;  -- 	LOAD   AtanY
           13D : 11DC;  -- 	STORE  d16sN        ; Y in numerator
           13E : 097B;  -- 	LOAD   AtanX
           13F : 11DD;  -- 	STORE  d16sD        ; X in denominator
           140 : 8168;  -- 	CALL   A2_div       ; divide
           141 : 09E2;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           142 : 117D;  -- 	STORE  AtanRatio
           143 : 11A4;  -- 	STORE  m16sA
           144 : 11A5;  -- 	STORE  m16sB
           145 : 815F;  -- 	CALL   A2_mult      ; X^2
           146 : 11A4;  -- 	STORE  m16sA
           147 : 097F;  -- 	LOAD   A2c
           148 : 11A5;  -- 	STORE  m16sB
           149 : 815F;  -- 	CALL   A2_mult
           14A : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           14B : 11DD;  -- 	STORE  d16sD
           14C : 097D;  -- 	LOAD   AtanRatio
           14D : 11DC;  -- 	STORE  d16sN        ; Ratio in numerator
           14E : 8168;  -- 	CALL   A2_div       ; divide
           14F : 09E2;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           150 : 11A4;  -- 	STORE  m16sA        ; <= result in radians
           151 : 0980;  -- 	LOAD   A2cd         ; degree conversion factor
           152 : 11A5;  -- 	STORE  m16sB
           153 : 815F;  -- 	CALL   A2_mult      ; convert to degrees
           154 : 117E;  -- 	STORE  AtanT
           155 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           156 : 49EA;  -- 	AND    One
           157 : 415C;  -- 	JZERO  A2_rdwn      ; round down
           158 : 097E;  -- 	LOAD   AtanT
           159 : 6018;  -- 	SHIFT  -8
           15A : 6801;  -- 	ADDI   1            ; round up
           15B : 8800;  -- 	RETURN
           15C : 097E;  -- 	LOAD   AtanT
           15D : 6018;  -- 	SHIFT  -8           ; round down
           15E : 8800;  -- 	RETURN
           15F : 8181;  -- 	CALL   Mult16s
           160 : 09A9;  -- 	LOAD   mres16sH
           161 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           162 : 11A9;  -- 	STORE  mres16sH
           163 : 09A8;  -- 	LOAD   mres16sL
           164 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           165 : 49FE;  -- 	AND    LowByte
           166 : 51A9;  -- 	OR     mres16sH     ; combine high and low words of result
           167 : 8800;  -- 	RETURN
           168 : 09F2;  -- 	LOAD  Nine            ; loop 8 times (256 = 2^8)
           169 : 117E;  -- 	STORE  AtanT
           16A : 097E;  -- 	LOAD   AtanT
           16B : 6FFF;  -- 	ADDI   -1
           16C : 396F;  -- 	JPOS   A2_DN        ; not done; continue shifting
           16D : 81AA;  -- 	CALL   Div16s       ; do the standard division
           16E : 8800;  -- 	RETURN
           16F : 117E;  -- 	STORE  AtanT
           170 : 09DC;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           171 : 6001;  -- 	SHIFT  1
           172 : 59DC;  -- 	XOR    d16sN        ; if the sign changed,
           173 : 3177;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           174 : 59DC;  -- 	XOR    d16sN        ; get back shifted version
           175 : 11DC;  -- 	STORE  d16sN
           176 : 296A;  -- 	JUMP   A2_DL
           177 : 09DD;  -- 	LOAD   d16sD
           178 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           179 : 11DD;  -- 	STORE  d16sD
           17A : 296A;  -- 	JUMP   A2_DL
           17B : 0000;  -- AtanX:      DW 0
           17C : 0000;  -- AtanY:      DW 0
           17D : 0000;  -- AtanRatio:  DW 0        ; =y/x
           17E : 0000;  -- AtanT:      DW 0        ; temporary value
           17F : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           180 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           181 : 09E9;  -- 	LOAD  Zero
           182 : 11A6;  -- 	STORE  m16sc        ; clear carry
           183 : 11A9;  -- 	STORE  mres16sH     ; clear result
           184 : 09F4;  -- 	LOAD  Sixteen       ; load 16 to counter
           185 : 11A7;  -- 	STORE  mcnt16s      
           186 : 09A6;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           187 : 418B;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           188 : 09A9;  -- 	LOAD   mres16sH     ; if a carry, 
           189 : 19A4;  -- 	ADD    m16sA        ; add multiplicand to result H
           18A : 11A9;  -- 	STORE  mres16sH
           18B : 09A5;  -- 	LOAD   m16sB
           18C : 49EA;  -- 	AND    One          ; check bit 0 of multiplier
           18D : 11A6;  -- 	STORE  m16sc        ; save as next carry
           18E : 4192;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           18F : 09A9;  -- 	LOAD   mres16sH     ; if bit 0 set,
           190 : 21A4;  -- 	SUB    m16sA        ; subtract multiplicand from result H
           191 : 11A9;  -- 	STORE  mres16sH
           192 : 09A5;  -- 	LOAD   m16sB
           193 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           194 : 49A3;  -- 	AND    c7FFF        ; clear msb
           195 : 11A5;  -- 	STORE  m16sB
           196 : 09A9;  -- 	LOAD   mres16sH     ; load result H
           197 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           198 : 51A5;  -- 	OR     m16sB
           199 : 11A5;  -- 	STORE  m16sB        ; result L now includes carry out from H
           19A : 09A9;  -- 	LOAD   mres16sH
           19B : 6011;  -- 	SHIFT  -1
           19C : 11A9;  -- 	STORE  mres16sH     ; shift result H >>1
           19D : 09A7;  -- 	LOAD   mcnt16s
           19E : 6FFF;  -- 	ADDI   -1           ; check counter
           19F : 3985;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1A0 : 09A5;  -- 	LOAD   m16sB
           1A1 : 11A8;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1A2 : 8800;  -- 	RETURN              ; Done
           1A3 : 7FFF;  -- c7FFF: DW &H7FFF
           1A4 : 0000;  -- m16sA: DW 0 ; multiplicand
           1A5 : 0000;  -- m16sB: DW 0 ; multipler
           1A6 : 0000;  -- m16sc: DW 0 ; carry
           1A7 : 0000;  -- mcnt16s: DW 0 ; counter
           1A8 : 0000;  -- mres16sL: DW 0 ; result low
           1A9 : 0000;  -- mres16sH: DW 0 ; result high
           1AA : 09E9;  -- 	LOAD  Zero
           1AB : 11E3;  -- 	STORE  dres16sR     ; clear remainder result
           1AC : 11E0;  -- 	STORE  d16sC1       ; clear carry
           1AD : 09DC;  -- 	LOAD   d16sN
           1AE : 59DD;  -- 	XOR    d16sD
           1AF : 11DE;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1B0 : 09F5;  -- 	LOAD   Seventeen
           1B1 : 11DF;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1B2 : 09DD;  -- 	LOAD   d16sD
           1B3 : 81E4;  -- 	CALL   Abs          ; take absolute value of denominator
           1B4 : 11DD;  -- 	STORE  d16sD
           1B5 : 09DC;  -- 	LOAD   d16sN
           1B6 : 81E4;  -- 	CALL   Abs          ; take absolute value of numerator
           1B7 : 11DC;  -- 	STORE  d16sN
           1B8 : 09DC;  -- 	LOAD   d16sN
           1B9 : 601F;  -- 	SHIFT  -15          ; get msb
           1BA : 49EA;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1BB : 11E1;  -- 	STORE  d16sC2       ; store as carry
           1BC : 09DC;  -- 	LOAD   d16sN
           1BD : 6001;  -- 	SHIFT  1            ; shift <<1
           1BE : 51E0;  -- 	OR     d16sC1       ; with carry
           1BF : 11DC;  -- 	STORE  d16sN
           1C0 : 09DF;  -- 	LOAD   d16sT
           1C1 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1C2 : 41D2;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1C3 : 11DF;  -- 	STORE  d16sT
           1C4 : 09E3;  -- 	LOAD   dres16sR
           1C5 : 6001;  -- 	SHIFT  1            ; shift remainder
           1C6 : 51E1;  -- 	OR     d16sC2       ; with carry from other shift
           1C7 : 21DD;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1C8 : 31CD;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1C9 : 11E3;  -- 	STORE  dres16sR
           1CA : 09EA;  -- 	LOAD   One
           1CB : 11E0;  -- 	STORE  d16sC1       ; set carry
           1CC : 29B8;  -- 	JUMP   Div16s_loop
           1CD : 19DD;  -- 	ADD    d16sD        ; add denominator back in
           1CE : 11E3;  -- 	STORE  dres16sR
           1CF : 09E9;  -- 	LOAD   Zero
           1D0 : 11E0;  -- 	STORE  d16sC1       ; clear carry
           1D1 : 29B8;  -- 	JUMP   Div16s_loop
           1D2 : 09DC;  -- 	LOAD   d16sN
           1D3 : 11E2;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1D4 : 09DE;  -- 	LOAD   d16sS        ; check the sign indicator
           1D5 : 31D7;  -- 	JNEG   Div16s_neg
           1D6 : 8800;  -- 	RETURN
           1D7 : 09E2;  -- 	LOAD   dres16sQ     ; need to negate the result
           1D8 : 59E8;  -- 	XOR    NegOne
           1D9 : 6801;  -- 	ADDI   1
           1DA : 11E2;  -- 	STORE  dres16sQ
           1DB : 8800;  -- 	RETURN	
           1DC : 0000;  -- d16sN: DW 0 ; numerator
           1DD : 0000;  -- d16sD: DW 0 ; denominator
           1DE : 0000;  -- d16sS: DW 0 ; sign value
           1DF : 0000;  -- d16sT: DW 0 ; temp counter
           1E0 : 0000;  -- d16sC1: DW 0 ; carry value
           1E1 : 0000;  -- d16sC2: DW 0 ; carry value
           1E2 : 0000;  -- dres16sQ: DW 0 ; quotient result
           1E3 : 0000;  -- dres16sR: DW 0 ; remainder result
           1E4 : 39E7;  -- 	JPOS   Abs_r
           1E5 : 59E8;  -- 	XOR    NegOne       ; Flip all bits
           1E6 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           1E7 : 8800;  -- 	RETURN
           1E8 : FFFF;  -- NegOne:   DW -1
           1E9 : 0000;  -- Zero:     DW 0
           1EA : 0001;  -- One:      DW 1
           1EB : 0002;  -- Two:      DW 2
           1EC : 0003;  -- Three:    DW 3
           1ED : 0004;  -- Four:     DW 4
           1EE : 0005;  -- Five:     DW 5
           1EF : 0006;  -- Six:      DW 6
           1F0 : 0007;  -- Seven:    DW 7
           1F1 : 0008;  -- Eight:    DW 8
           1F2 : 0009;  -- Nine:     DW 9
           1F3 : 000A;  -- Ten:      DW 10
           1F4 : 0010;  -- Sixteen:  DW 16
           1F5 : 0011;  -- seventeen: DW 17
           1F6 : 0001;  -- Mask0:    DW &B00000001
           1F7 : 0002;  -- Mask1:    DW &B00000010
           1F8 : 0004;  -- Mask2:    DW &B00000100
           1F9 : 0008;  -- Mask3:    DW &B00001000
           1FA : 0010;  -- Mask4:    DW &B00010000
           1FB : 0020;  -- Mask5:    DW &B00100000
           1FC : 0040;  -- Mask6:    DW &B01000000
           1FD : 0080;  -- Mask7:    DW &B10000000
           1FE : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           1FF : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           200 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           201 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           202 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           203 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           204 : 00B4;  -- Deg180:   DW 180       ; 180
           205 : 010E;  -- Deg270:   DW 270       ; 270
           206 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           207 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           208 : FF9C;  -- RSlow:    DW -100
           209 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           20A : FEA2;  -- RMid:     DW -350
           20B : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           20C : FE0C;  -- RFast:    DW -500
           20D : DE84;  -- FMidSq:   DW 122500 ; the square of 350 for calculations
           20E : 0077;  -- StopDist: DW 119    ; the approximate distance in robot units it takes to stop the robot at medium speed
           20F : 0046;  -- MinBatt:  DW 70       ; 14.0V - minimum safe battery voltage
           210 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           211 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           500 : 0489;  -- 	X1: DW &H0489
           501 : 0489;  -- 	X2: DW &H0489
           502 : FB77;  -- 	X3: DW &HFB77
           503 : FB77;  -- 	X4: DW &HFB77
           504 : 015C;  -- 	X5: DW &H015c
           505 : 0000;  -- 	X6: DW &H0000
           506 : FF30;  -- 	X7: DW &HFF30
           507 : FC77;  -- 	X8: DW &HFC77
           508 : 0000;  -- 	X9: DW 0
           509 : 015C;  -- 	X10: DW &H015c
           50A : 0000;  -- 	X11: DW 0
           50B : FB77;  -- 	X12: DW &HFB77
           50C : FA55;  -- 	Y1: DW &HFA55
           50D : 05AB;  -- 	Y2: DW &H05AB
           50E : FA55;  -- 	Y3: DW &HFA55
           50F : 05AB;  -- 	Y4: DW &H05AB
           510 : 0000;  -- 	Y5: DW 0
           511 : 015C;  -- 	Y6: DW &H015c
           512 : 0000;  -- 	Y7: DW 0
           513 : 015C;  -- 	Y8: DW &H015c
           514 : 0000;  -- 	Y9: DW 0
           515 : 015C;  -- 	Y10: DW &H015c
           516 : 0000;  -- 	Y11: DW 0
           517 : FB77;  -- 	Y12: DW &HFB77
  END;
