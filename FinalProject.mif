-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2801;  -- JUMP Init  ; Begin program at x000
           001 : 0960;  -- 	LOAD   Zero
           002 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           003 : 988B;  -- 	OUT    RVELCMD
           004 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           005 : 8062;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 8044;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 4971;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 496E;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 496E;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 1154;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 5154;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 496F;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 0960;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming	
           01D : 0801;  -- 	LOAD   1
           01E : 9806;  -- 	OUT LCD
           01F : 0960;  -- 	LOAD   Zero         ; Stop everything.
           020 : 9883;  -- 	OUT    LVELCMD
           021 : 988B;  -- 	OUT    RVELCMD
           022 : 98B2;  -- 	OUT    SONAREN
           023 : 0825;  -- 	LOAD   DEAD         ; An indication that we are dead
           024 : 2824;  -- 	JUMP   Forever      ; Do this forever.
           025 : DEAD;  -- 	DEAD:  DW &HDEAD    ; Example of a "local" variable
           026 : 90C0;  -- 	IN XPOS
           027 : 2155;  -- 	SUB XGoal
           028 : 1157;  -- 	STORE dX
           029 : 114E;  -- 	STORE AtanX
           02A : 10A9;  -- 	STORE m16sA
           02B : 10AA;  -- 	STORE m16sB
           02C : 8086;  -- 	CALL Mult16s
           02D : 1154;  -- 	STORE temp
           02E : 90C1;  -- 	IN YPOS
           02F : 2156;  -- 	SUB YGoal
           030 : 1158;  -- 	STORE dY
           031 : 114F;  -- 	STORE AtanY
           032 : 10A9;  -- 	STORE m16sA
           033 : 10AA;  -- 	STORE m16sB
           034 : 8086;  -- 	CALL Mult16s
           035 : 1954;  -- 	ADD  temp
           036 : 10E1;  -- 	STORE d16sN
           037 : 10E2;  -- 	STORE d16sD
           038 : 80AF;  -- 	CALL  Div16s
           039 : 08E7;  -- 	LOAD dres16sQ
           03A : 115C;  -- 	STORE DistErr
           03B : 80ED;  -- 	CALL  Atan2
           03C : 1159;  -- 	STORE ThetaGoal
           03D : 8800;  -- 	RETURN
           03E : 3041;  -- 	JNEG   M360N       ; loop exit condition
           03F : 6E98;  -- 	ADDI   -360        ; start removing 360 at a time
           040 : 283E;  -- 	JUMP   Mod360      ; keep going until negative
           041 : 6968;  -- 	ADDI   360         ; get back to positive
           042 : 3041;  -- 	JNEG   M360N       ; (keep adding 360 until non-negative)
           043 : 8800;  -- 	RETURN
           044 : 805C;  -- 	CALL   GetBattLvl
           045 : 4044;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           046 : 2184;  -- 	SUB    MinBatt
           047 : 304A;  -- 	JNEG   DeadBatt
           048 : 1984;  -- 	ADD    MinBatt     ; get original value back
           049 : 8800;  -- 	RETURN
           04A : 0964;  -- 	LOAD   Four
           04B : 980A;  -- 	OUT    BEEP        ; start beep sound
           04C : 805C;  -- 	CALL   GetBattLvl  ; get the battery level
           04D : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           04E : 9805;  -- 	OUT    SSEG2
           04F : 9806;  -- 	OUT    LCD
           050 : 0960;  -- 	LOAD   Zero
           051 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           052 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           053 : 9807;  -- 	OUT    XLEDS
           054 : 8078;  -- 	CALL   Wait1       ; 1 second
           055 : 0960;  -- 	Load   Zero
           056 : 980A;  -- 	OUT    BEEP        ; stop beeping
           057 : 0960;  -- 	LOAD   Zero
           058 : 9801;  -- 	OUT    LEDS        ; LEDs off
           059 : 9807;  -- 	OUT    XLEDS
           05A : 8078;  -- 	CALL   Wait1       ; 1 second
           05B : 284A;  -- 	JUMP   DeadBatt    ; repeat forever
           05C : 0986;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           05D : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           05E : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           05F : 806A;  -- 	CALL   BlockI2C    ; wait for it to finish
           060 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           061 : 8800;  -- 	RETURN
           062 : 806A;  -- 	CALL   BlockI2C    ; wait for idle
           063 : 0985;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           064 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           065 : 0960;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           066 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           067 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           068 : 806A;  -- 	CALL   BlockI2C    ; wait for it to finish
           069 : 8800;  -- 	RETURN
           06A : 0960;  -- 	LOAD   Zero
           06B : 1154;  -- 	STORE  Temp        ; Used to check for timeout
           06C : 0954;  -- 	LOAD   Temp
           06D : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           06E : 1154;  -- 	STORE  Temp
           06F : 4073;  -- 	JZERO  I2CError    ; Timeout occurred; error
           070 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           071 : 386C;  -- 	JPOS   BI2CL       ; If not 0, try again
           072 : 8800;  -- 	RETURN             ; Else return
           073 : 0960;  -- 	LOAD   Zero
           074 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           075 : 9804;  -- 	OUT    SSEG1
           076 : 9805;  -- 	OUT    SSEG2       ; display error message
           077 : 2873;  -- 	JUMP   I2CError
           078 : 9802;  -- 	OUT    TIMER
           079 : 9002;  -- 	IN     TIMER
           07A : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           07B : 6F9C;  -- 	ADDI   -100         ; 1 second in 10Hz.
           07C : 3079;  -- 	JNEG   Wloop
           07D : 8800;  -- 	RETURN
           07E : 1085;  -- 	STORE  WaitTime
           07F : 9802;  -- 	OUT    Timer
           080 : 9002;  -- 	IN     Timer
           081 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           082 : 2085;  -- 	SUB    WaitTime
           083 : 3080;  -- 	JNEG   WACLoop
           084 : 8800;  -- 	RETURN
           085 : 0000;  -- 	WaitTime: DW 0     ; "local" variable.
           086 : 0960;  -- 	LOAD  Zero
           087 : 10AB;  -- 	STORE  m16sc        ; clear carry
           088 : 10AE;  -- 	STORE  mres16sH     ; clear result
           089 : 096B;  -- 	LOAD  Sixteen       ; load 16 to counter
           08A : 10AC;  -- 	STORE  mcnt16s      
           08B : 08AB;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           08C : 4090;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           08D : 08AE;  -- 	LOAD   mres16sH     ; if a carry, 
           08E : 18A9;  -- 	ADD    m16sA        ; add multiplicand to result H
           08F : 10AE;  -- 	STORE  mres16sH
           090 : 08AA;  -- 	LOAD   m16sB
           091 : 4961;  -- 	AND    One          ; check bit 0 of multiplier
           092 : 10AB;  -- 	STORE  m16sc        ; save as next carry
           093 : 4097;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           094 : 08AE;  -- 	LOAD   mres16sH     ; if bit 0 set,
           095 : 20A9;  -- 	SUB    m16sA        ; subtract multiplicand from result H
           096 : 10AE;  -- 	STORE  mres16sH
           097 : 08AA;  -- 	LOAD   m16sB
           098 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           099 : 48A8;  -- 	AND    c7FFF        ; clear msb
           09A : 10AA;  -- 	STORE  m16sB
           09B : 08AE;  -- 	LOAD   mres16sH     ; load result H
           09C : 600F;  -- 	SHIFT  15           ; move lsb to msb
           09D : 50AA;  -- 	OR     m16sB
           09E : 10AA;  -- 	STORE  m16sB        ; result L now includes carry out from H
           09F : 08AE;  -- 	LOAD   mres16sH
           0A0 : 6011;  -- 	SHIFT  -1
           0A1 : 10AE;  -- 	STORE  mres16sH     ; shift result H >>1
           0A2 : 08AC;  -- 	LOAD   mcnt16s
           0A3 : 6FFF;  -- 	ADDI   -1           ; check counter
           0A4 : 388A;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           0A5 : 08AA;  -- 	LOAD   m16sB
           0A6 : 10AD;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           0A7 : 8800;  -- 	RETURN              ; Done
           0A8 : 7FFF;  -- c7FFF: DW &H7FFF
           0A9 : 0000;  -- m16sA: DW 0 ; multiplicand
           0AA : 0000;  -- m16sB: DW 0 ; multipler
           0AB : 0000;  -- m16sc: DW 0 ; carry
           0AC : 0000;  -- mcnt16s: DW 0 ; counter
           0AD : 0000;  -- mres16sL: DW 0 ; result low
           0AE : 0000;  -- mres16sH: DW 0 ; result high
           0AF : 0960;  -- 	LOAD  Zero
           0B0 : 10E8;  -- 	STORE  dres16sR     ; clear remainder result
           0B1 : 10E5;  -- 	STORE  d16sC1       ; clear carry
           0B2 : 08E1;  -- 	LOAD   d16sN
           0B3 : 58E2;  -- 	XOR    d16sD
           0B4 : 10E3;  -- 	STORE  d16sS        ; sign determination = N XOR D
           0B5 : 096C;  -- 	LOAD   Seventeen
           0B6 : 10E4;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           0B7 : 08E2;  -- 	LOAD   d16sD
           0B8 : 80E9;  -- 	CALL   Abs          ; take absolute value of denominator
           0B9 : 10E2;  -- 	STORE  d16sD
           0BA : 08E1;  -- 	LOAD   d16sN
           0BB : 80E9;  -- 	CALL   Abs          ; take absolute value of numerator
           0BC : 10E1;  -- 	STORE  d16sN
           0BD : 08E1;  -- 	LOAD   d16sN
           0BE : 601F;  -- 	SHIFT  -15          ; get msb
           0BF : 4961;  -- 	AND    One          ; only msb (because shift is arithmetic)
           0C0 : 10E6;  -- 	STORE  d16sC2       ; store as carry
           0C1 : 08E1;  -- 	LOAD   d16sN
           0C2 : 6001;  -- 	SHIFT  1            ; shift <<1
           0C3 : 50E5;  -- 	OR     d16sC1       ; with carry
           0C4 : 10E1;  -- 	STORE  d16sN
           0C5 : 08E4;  -- 	LOAD   d16sT
           0C6 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           0C7 : 40D7;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           0C8 : 10E4;  -- 	STORE  d16sT
           0C9 : 08E8;  -- 	LOAD   dres16sR
           0CA : 6001;  -- 	SHIFT  1            ; shift remainder
           0CB : 50E6;  -- 	OR     d16sC2       ; with carry from other shift
           0CC : 20E2;  -- 	SUB    d16sD        ; subtract denominator from remainder
           0CD : 30D2;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           0CE : 10E8;  -- 	STORE  dres16sR
           0CF : 0961;  -- 	LOAD   One
           0D0 : 10E5;  -- 	STORE  d16sC1       ; set carry
           0D1 : 28BD;  -- 	JUMP   Div16s_loop
           0D2 : 18E2;  -- 	ADD    d16sD        ; add denominator back in
           0D3 : 10E8;  -- 	STORE  dres16sR
           0D4 : 0960;  -- 	LOAD   Zero
           0D5 : 10E5;  -- 	STORE  d16sC1       ; clear carry
           0D6 : 28BD;  -- 	JUMP   Div16s_loop
           0D7 : 08E1;  -- 	LOAD   d16sN
           0D8 : 10E7;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           0D9 : 08E3;  -- 	LOAD   d16sS        ; check the sign indicator
           0DA : 30DC;  -- 	JNEG   Div16s_neg
           0DB : 8800;  -- 	RETURN
           0DC : 08E7;  -- 	LOAD   dres16sQ     ; need to negate the result
           0DD : 595F;  -- 	XOR    NegOne
           0DE : 6801;  -- 	ADDI   1
           0DF : 10E7;  -- 	STORE  dres16sQ
           0E0 : 8800;  -- 	RETURN	
           0E1 : 0000;  -- d16sN: DW 0 ; numerator
           0E2 : 0000;  -- d16sD: DW 0 ; denominator
           0E3 : 0000;  -- d16sS: DW 0 ; sign value
           0E4 : 0000;  -- d16sT: DW 0 ; temp counter
           0E5 : 0000;  -- d16sC1: DW 0 ; carry value
           0E6 : 0000;  -- d16sC2: DW 0 ; carry value
           0E7 : 0000;  -- dres16sQ: DW 0 ; quotient result
           0E8 : 0000;  -- dres16sR: DW 0 ; remainder result
           0E9 : 38EC;  -- 	JPOS   Abs_r
           0EA : 595F;  -- 	XOR    NegOne       ; Flip all bits
           0EB : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           0EC : 8800;  -- 	RETURN
           0ED : 094F;  -- 	LOAD   AtanY
           0EE : 80E9;  -- 	CALL   Abs          ; abs(y)
           0EF : 1151;  -- 	STORE  AtanT
           0F0 : 094E;  -- 	LOAD   AtanX        ; abs(x)
           0F1 : 80E9;  -- 	CALL   Abs
           0F2 : 2151;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           0F3 : 30FE;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           0F4 : 094E;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           0F5 : 30FB;  -- 	JNEG   A2_R3
           0F6 : 810F;  -- 	CALL   A2_calc      ; Octants 1, 8
           0F7 : 30F9;  -- 	JNEG   A2_R1n
           0F8 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           0F9 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           0FA : 8800;  -- 	RETURN
           0FB : 810F;  -- 	CALL   A2_calc      ; Octants 4, 5            
           0FC : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           0FD : 8800;  -- 	RETURN
           0FE : 094F;  -- 	LOAD   AtanY        ; Swap input arguments
           0FF : 1151;  -- 	STORE  AtanT
           100 : 094E;  -- 	LOAD   AtanX
           101 : 114F;  -- 	STORE  AtanY
           102 : 0951;  -- 	LOAD   AtanT
           103 : 114E;  -- 	STORE  AtanX
           104 : 390A;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           105 : 810F;  -- 	CALL   A2_calc      ; else octants 6, 7
           106 : 595F;  -- 	XOR    NegOne
           107 : 6801;  -- 	ADDI   1            ; negate the angle
           108 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           109 : 8800;  -- 	RETURN
           10A : 810F;  -- 	CALL   A2_calc      ; Octants 2, 3
           10B : 595F;  -- 	XOR    NegOne
           10C : 6801;  -- 	ADDI   1            ; negate the angle
           10D : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           10E : 8800;  -- 	RETURN
           10F : 094F;  -- 	LOAD   AtanY
           110 : 10E1;  -- 	STORE  d16sN        ; Y in numerator
           111 : 094E;  -- 	LOAD   AtanX
           112 : 10E2;  -- 	STORE  d16sD        ; X in denominator
           113 : 813B;  -- 	CALL   A2_div       ; divide
           114 : 08E7;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           115 : 1150;  -- 	STORE  AtanRatio
           116 : 10A9;  -- 	STORE  m16sA
           117 : 10AA;  -- 	STORE  m16sB
           118 : 8132;  -- 	CALL   A2_mult      ; X^2
           119 : 10A9;  -- 	STORE  m16sA
           11A : 0952;  -- 	LOAD   A2c
           11B : 10AA;  -- 	STORE  m16sB
           11C : 8132;  -- 	CALL   A2_mult
           11D : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           11E : 10E2;  -- 	STORE  d16sD
           11F : 0950;  -- 	LOAD   AtanRatio
           120 : 10E1;  -- 	STORE  d16sN        ; Ratio in numerator
           121 : 813B;  -- 	CALL   A2_div       ; divide
           122 : 08E7;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           123 : 10A9;  -- 	STORE  m16sA        ; <= result in radians
           124 : 0953;  -- 	LOAD   A2cd         ; degree conversion factor
           125 : 10AA;  -- 	STORE  m16sB
           126 : 8132;  -- 	CALL   A2_mult      ; convert to degrees
           127 : 1151;  -- 	STORE  AtanT
           128 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           129 : 4961;  -- 	AND    One
           12A : 412F;  -- 	JZERO  A2_rdwn      ; round down
           12B : 0951;  -- 	LOAD   AtanT
           12C : 6018;  -- 	SHIFT  -8
           12D : 6801;  -- 	ADDI   1            ; round up
           12E : 8800;  -- 	RETURN
           12F : 0951;  -- 	LOAD   AtanT
           130 : 6018;  -- 	SHIFT  -8           ; round down
           131 : 8800;  -- 	RETURN
           132 : 8086;  -- 	CALL   Mult16s
           133 : 08AE;  -- 	LOAD   mres16sH
           134 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           135 : 10AE;  -- 	STORE  mres16sH
           136 : 08AD;  -- 	LOAD   mres16sL
           137 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           138 : 4975;  -- 	AND    LowByte
           139 : 50AE;  -- 	OR     mres16sH     ; combine high and low words of result
           13A : 8800;  -- 	RETURN
           13B : 0969;  -- 	LOAD  Nine            ; loop 8 times (256 = 2^8)
           13C : 1151;  -- 	STORE  AtanT
           13D : 0951;  -- 	LOAD   AtanT
           13E : 6FFF;  -- 	ADDI   -1
           13F : 3942;  -- 	JPOS   A2_DN        ; not done; continue shifting
           140 : 80AF;  -- 	CALL   Div16s       ; do the standard division
           141 : 8800;  -- 	RETURN
           142 : 1151;  -- 	STORE  AtanT
           143 : 08E1;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           144 : 6001;  -- 	SHIFT  1
           145 : 58E1;  -- 	XOR    d16sN        ; if the sign changed,
           146 : 314A;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           147 : 58E1;  -- 	XOR    d16sN        ; get back shifted version
           148 : 10E1;  -- 	STORE  d16sN
           149 : 293D;  -- 	JUMP   A2_DL
           14A : 08E2;  -- 	LOAD   d16sD
           14B : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           14C : 10E2;  -- 	STORE  d16sD
           14D : 293D;  -- 	JUMP   A2_DL
           14E : 0000;  -- AtanX:      DW 0
           14F : 0000;  -- AtanY:      DW 0
           150 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           151 : 0000;  -- AtanT:      DW 0        ; temporary value
           152 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           153 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           154 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           155 : FF9C;  -- XGoal:    DW -100
           156 : 01F4;  -- YGoal:	  DW 500
           157 : 0000;  -- dX:       DW 0
           158 : 0000;  -- dY:       DW 0
           159 : 0000;  -- ThetaGoal: DW 0
           15A : 0000;  -- X:		DW 0
           15B : 0000;  -- Y:		DW	0
           15C : 0000;  -- DistErr: DW 0
           15D : 0000;  -- LSpeed: DW 0
           15E : 0000;  -- RSpeed: DW 0
           15F : FFFF;  -- NegOne:   DW -1
           160 : 0000;  -- Zero:     DW 0
           161 : 0001;  -- One:      DW 1
           162 : 0002;  -- Two:      DW 2
           163 : 0003;  -- Three:    DW 3
           164 : 0004;  -- Four:     DW 4
           165 : 0005;  -- Five:     DW 5
           166 : 0006;  -- Six:      DW 6
           167 : 0007;  -- Seven:    DW 7
           168 : 0008;  -- Eight:    DW 8
           169 : 0009;  -- Nine:     DW 9
           16A : 000A;  -- Ten:      DW 10
           16B : 0010;  -- Sixteen:  DW 16
           16C : 0011;  -- seventeen: DW 17
           16D : 0001;  -- Mask0:    DW &B00000001
           16E : 0002;  -- Mask1:    DW &B00000010
           16F : 0004;  -- Mask2:    DW &B00000100
           170 : 0008;  -- Mask3:    DW &B00001000
           171 : 0010;  -- Mask4:    DW &B00010000
           172 : 0020;  -- Mask5:    DW &B00100000
           173 : 0040;  -- Mask6:    DW &B01000000
           174 : 0080;  -- Mask7:    DW &B10000000
           175 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           176 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           177 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           178 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           179 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           17A : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           17B : 00B4;  -- Deg180:   DW 180       ; 180
           17C : 010E;  -- Deg270:   DW 270       ; 270
           17D : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           17E : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           17F : FF9C;  -- RSlow:    DW -100
           180 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           181 : FEA2;  -- RMid:     DW -350
           182 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           183 : FE0C;  -- RFast:    DW -500
           184 : 0046;  -- MinBatt:  DW 70       ; 14.0V - minimum safe battery voltage
           185 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           186 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
