-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2801;  -- JUMP Init  ; Begin program at x000
           001 : 09D2;  -- 	LOAD   Zero
           002 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           003 : 988B;  -- 	OUT    RVELCMD
           004 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           005 : 80D4;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 80B6;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 49E3;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 49E0;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 49E0;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 11C6;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 51C6;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 49E1;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 09D2;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming	
           01D : 0801;  -- 	LOAD   1
           01E : 9806;  -- 	OUT LCD
           01F : 2820;  -- 	JUMP   CalcAngle
           020 : 90C0;  -- 	IN XPOS
           021 : 11CC;  -- 	STORE X
           022 : 9806;  -- 	OUT LCD
           023 : 09C7;  -- 	LOAD XGoal
           024 : 21CC;  -- 	SUB X
           025 : 11C9;  -- 	STORE dX
           026 : 11C0;  -- 	STORE AtanX
           027 : 90C1;  -- 	IN YPOS
           028 : 11CD;  -- 	STORE Y
           029 : 9805;  -- 	OUT SSEG2
           02A : 09C8;  -- 	LOAD YGoal
           02B : 21CD;  -- 	SUB Y
           02C : 11CA;  -- 	STORE dY
           02D : 11C1;  -- 	STORE AtanY
           02E : 815F;  --     CALL Atan2 ;function provided, uses variables AtanX and AtanY, stores 0-365 angle in AC
           02F : 11CB;  -- 	STORE ThetaGoal
           030 : 90C2;  -- 	IN THETA
           031 : 105D;  -- 	STORE NowTheta
           032 : 21CB;  -- 	SUB ThetaGoal
           033 : 9805;  -- 	OUT SSEG2
           034 : 9806;  -- 	OUT LCD
           035 : 80B0;  -- 	CALL   Mod360      ; remove negative numbers ; current in the AC is the diff between theta and desired theta
           036 : 21ED;  -- 	SUB    Deg180        ; test which semicircle error is in
           037 : 3839;  -- 	JPOS   NeedLeft    ; >180 means need left turn
           038 : 2849;  -- 	JUMP   NeedRight   ; otherwise, need right turn
           039 : 09CB;  -- 	LOAD   ThetaGoal
           03A : 205D;  -- 	SUB    NowTheta    ; get the turn error
           03B : 80B0;  -- 	CALL   Mod360      ; fix errors around 0
           03C : 205E;  -- 	SUB    DeadZone
           03D : 3059;  -- 	JNEG   NoTurn      ; stop moving if close
           03E : 185E;  -- 	ADD    DeadZone
           03F : 6F9C;  -- 	ADDI   -100        ; check if >100
           040 : 3042;  -- 	JNEG   TurnLeft
           041 : 09D2;  -- 	LOAD   Zero        ; remove excess
           042 : 6864;  -- 	ADDI   100         ; replace the 100 from before
           043 : 6002;  -- 	SHIFT  2           ; multiply by 4
           044 : 988B;  -- 	OUT    RVELCMD     ; set right wheel forward
           045 : 59D1;  -- 	XOR    NegOne
           046 : 6801;  -- 	ADDI   1           ; negate number
           047 : 9883;  -- 	OUT    LVELCMD     ; set left wheel backwards
           048 : 2820;  -- 	Jump   CalcAngle
           049 : 085D;  -- 	LOAD   NowTheta
           04A : 21CB;  -- 	SUB    ThetaGoal    ; get the turn error
           04B : 80B0;  -- 	CALL   Mod360      ; fix errors around 0
           04C : 205E;  -- 	SUB    DeadZone
           04D : 3059;  -- 	JNEG   NoTurn      ; stop moving if close
           04E : 185E;  -- 	ADD    DeadZone
           04F : 6F9C;  -- 	ADDI   -100        ; check if >100
           050 : 3052;  -- 	JNEG   TurnRight
           051 : 09D2;  -- 	LOAD   Zero        ; remove excess
           052 : 6864;  -- 	ADDI   100         ; replace the 100 from before
           053 : 6002;  -- 	SHIFT  2           ; multiply by 4
           054 : 9883;  -- 	OUT    LVELCMD     ; set left wheel forward
           055 : 59D1;  -- 	XOR    NegOne
           056 : 6801;  -- 	ADDI   1           ; negate number
           057 : 988B;  -- 	OUT    RVELCMD     ; set left wheel backwards
           058 : 2820;  -- 	JUMP   CalcAngle             ; exit ISR
           059 : 09D2;  -- 	LOAD   Zero
           05A : 9883;  -- 	OUT    LVELCMD
           05B : 988B;  -- 	OUT    RVELCMD
           05C : 2860;  -- 	JUMP   goForward
           05D : 0000;  -- 	NowTheta: DW 0
           05E : 0003;  -- 	DeadZone: DW 3
           05F : 0000;  -- 	TCount: DW 0
           060 : 09F4;  --     LOAD FFast
           061 : 11D0;  -- 	STORE RSpeed
           062 : 11CF;  -- 	STORE LSpeed
           063 : 09D0;  --     Load RSpeed
           064 : 988B;  -- 	OUT RVELCMD
           065 : 09CF;  -- 	Load LSpeed
           066 : 9883;  -- 	OUT LVELCMD
           067 : 90C0;  -- 	IN XPOS
           068 : 9804;  -- 	OUT SSEG1
           069 : 90C1;  -- 	IN YPOS
           06A : 9805;  -- 	OUT SSEG2
           06B : 8098;  --     CALL CalcError ;error includes distance and angle
           06C : 09CE;  -- 	LOAD DistErr
           06D : 9806;  -- 	OUT  LCD
           06E : 21DC;  -- 	SUB  Ten
           06F : 4091;  -- 	JZERO Die
           070 : 2863;  -- 	JUMP Loop
           071 : 09CB;  -- 	LOAD   ThetaGoal
           072 : 80B0;  -- 	CALL   Mod360      ; remove negative numbers ; current in the AC is the diff between theta and desired theta
           073 : 21ED;  -- 	SUB    Deg180        ; test which semicircle error is in
           074 : 3877;  -- 	JPOS   Left    ; >180 means need left turn
           075 : 307C;  -- 	JNEG   Right   ; otherwise, need right turn
           076 : 2863;  -- 	JUMP   Loop    ;in this case, no turning
           077 : 09CF;  -- 	LOAD LSpeed
           078 : 815B;  -- 	CALL Abs
           079 : 21F0;  -- 	SUB  FSlow
           07A : 3089;  -- 	JNEG AddR
           07B : 288D;  -- 	JUMP SubL
           07C : 09D0;  -- 	LOAD RSpeed
           07D : 815B;  -- 	CALL Abs
           07E : 21F0;  -- 	SUB  FSlow
           07F : 3081;  -- 	JNEG AddL
           080 : 2885;  -- 	Jump SubR
           081 : 09CF;  -- 	LOAD  LSpeed
           082 : 1801;  -- 	ADD   1
           083 : 11CF;  -- 	STORE LSpeed
           084 : 2863;  -- 	JUMP  Loop
           085 : 09D0;  --     LOAD  RSpeed
           086 : 2001;  -- 	SUB   1
           087 : 11D0;  -- 	STORE RSpeed
           088 : 2863;  -- 	JUMP Loop
           089 : 09D0;  --     LOAD  RSpeed
           08A : 1801;  -- 	ADD   1
           08B : 11D0;  -- 	STORE RSpeed
           08C : 2863;  -- 	JUMP Loop
           08D : 09D0;  -- 	LOAD  RSpeed
           08E : 2001;  -- 	SUB   1
           08F : 11D0;  -- 	STORE RSpeed
           090 : 2863;  -- 	JUMP Loop
           091 : 09D2;  -- 	LOAD   Zero         ; Stop everything.
           092 : 9883;  -- 	OUT    LVELCMD
           093 : 988B;  -- 	OUT    RVELCMD
           094 : 98B2;  -- 	OUT    SONAREN
           095 : 0897;  -- 	LOAD   DEAD         ; An indication that we are dead
           096 : 2896;  -- 	JUMP   Forever      ; Do this forever.
           097 : DEAD;  -- 	DEAD:  DW &HDEAD    ; Example of a "local" variable
           098 : 90C0;  -- 	IN XPOS
           099 : 21C7;  -- 	SUB XGoal
           09A : 11C9;  -- 	STORE dX
           09B : 11C0;  -- 	STORE AtanX
           09C : 111B;  -- 	STORE m16sA
           09D : 111C;  -- 	STORE m16sB
           09E : 80F8;  -- 	CALL Mult16s
           09F : 11C6;  -- 	STORE temp
           0A0 : 90C1;  -- 	IN YPOS
           0A1 : 21C8;  -- 	SUB YGoal
           0A2 : 11CA;  -- 	STORE dY
           0A3 : 11C1;  -- 	STORE AtanY
           0A4 : 111B;  -- 	STORE m16sA
           0A5 : 111C;  -- 	STORE m16sB
           0A6 : 80F8;  -- 	CALL Mult16s
           0A7 : 19C6;  -- 	ADD  temp
           0A8 : 1153;  -- 	STORE d16sN
           0A9 : 1154;  -- 	STORE d16sD
           0AA : 8121;  -- 	CALL  Div16s
           0AB : 0959;  -- 	LOAD dres16sQ
           0AC : 11CE;  -- 	STORE DistErr
           0AD : 815F;  -- 	CALL  Atan2
           0AE : 11CB;  -- 	STORE ThetaGoal
           0AF : 8800;  -- 	RETURN
           0B0 : 30B3;  -- 	JNEG   M360N       ; loop exit condition
           0B1 : 6E98;  -- 	ADDI   -360        ; start removing 360 at a time
           0B2 : 28B0;  -- 	JUMP   Mod360      ; keep going until negative
           0B3 : 6968;  -- 	ADDI   360         ; get back to positive
           0B4 : 30B3;  -- 	JNEG   M360N       ; (keep adding 360 until non-negative)
           0B5 : 8800;  -- 	RETURN
           0B6 : 80CE;  -- 	CALL   GetBattLvl
           0B7 : 40B6;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           0B8 : 21F6;  -- 	SUB    MinBatt
           0B9 : 30BC;  -- 	JNEG   DeadBatt
           0BA : 19F6;  -- 	ADD    MinBatt     ; get original value back
           0BB : 8800;  -- 	RETURN
           0BC : 09D6;  -- 	LOAD   Four
           0BD : 980A;  -- 	OUT    BEEP        ; start beep sound
           0BE : 80CE;  -- 	CALL   GetBattLvl  ; get the battery level
           0BF : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           0C0 : 9805;  -- 	OUT    SSEG2
           0C1 : 9806;  -- 	OUT    LCD
           0C2 : 09D2;  -- 	LOAD   Zero
           0C3 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           0C4 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           0C5 : 9807;  -- 	OUT    XLEDS
           0C6 : 80EA;  -- 	CALL   Wait1       ; 1 second
           0C7 : 09D2;  -- 	Load   Zero
           0C8 : 980A;  -- 	OUT    BEEP        ; stop beeping
           0C9 : 09D2;  -- 	LOAD   Zero
           0CA : 9801;  -- 	OUT    LEDS        ; LEDs off
           0CB : 9807;  -- 	OUT    XLEDS
           0CC : 80EA;  -- 	CALL   Wait1       ; 1 second
           0CD : 28BC;  -- 	JUMP   DeadBatt    ; repeat forever
           0CE : 09F8;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           0CF : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           0D0 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           0D1 : 80DC;  -- 	CALL   BlockI2C    ; wait for it to finish
           0D2 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           0D3 : 8800;  -- 	RETURN
           0D4 : 80DC;  -- 	CALL   BlockI2C    ; wait for idle
           0D5 : 09F7;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           0D6 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           0D7 : 09D2;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           0D8 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           0D9 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           0DA : 80DC;  -- 	CALL   BlockI2C    ; wait for it to finish
           0DB : 8800;  -- 	RETURN
           0DC : 09D2;  -- 	LOAD   Zero
           0DD : 11C6;  -- 	STORE  Temp        ; Used to check for timeout
           0DE : 09C6;  -- 	LOAD   Temp
           0DF : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           0E0 : 11C6;  -- 	STORE  Temp
           0E1 : 40E5;  -- 	JZERO  I2CError    ; Timeout occurred; error
           0E2 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           0E3 : 38DE;  -- 	JPOS   BI2CL       ; If not 0, try again
           0E4 : 8800;  -- 	RETURN             ; Else return
           0E5 : 09D2;  -- 	LOAD   Zero
           0E6 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           0E7 : 9804;  -- 	OUT    SSEG1
           0E8 : 9805;  -- 	OUT    SSEG2       ; display error message
           0E9 : 28E5;  -- 	JUMP   I2CError
           0EA : 9802;  -- 	OUT    TIMER
           0EB : 9002;  -- 	IN     TIMER
           0EC : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           0ED : 6F9C;  -- 	ADDI   -100         ; 1 second in 10Hz.
           0EE : 30EB;  -- 	JNEG   Wloop
           0EF : 8800;  -- 	RETURN
           0F0 : 10F7;  -- 	STORE  WaitTime
           0F1 : 9802;  -- 	OUT    Timer
           0F2 : 9002;  -- 	IN     Timer
           0F3 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           0F4 : 20F7;  -- 	SUB    WaitTime
           0F5 : 30F2;  -- 	JNEG   WACLoop
           0F6 : 8800;  -- 	RETURN
           0F7 : 0000;  -- 	WaitTime: DW 0     ; "local" variable.
           0F8 : 09D2;  -- 	LOAD  Zero
           0F9 : 111D;  -- 	STORE  m16sc        ; clear carry
           0FA : 1120;  -- 	STORE  mres16sH     ; clear result
           0FB : 09DD;  -- 	LOAD  Sixteen       ; load 16 to counter
           0FC : 111E;  -- 	STORE  mcnt16s      
           0FD : 091D;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           0FE : 4102;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           0FF : 0920;  -- 	LOAD   mres16sH     ; if a carry, 
           100 : 191B;  -- 	ADD    m16sA        ; add multiplicand to result H
           101 : 1120;  -- 	STORE  mres16sH
           102 : 091C;  -- 	LOAD   m16sB
           103 : 49D3;  -- 	AND    One          ; check bit 0 of multiplier
           104 : 111D;  -- 	STORE  m16sc        ; save as next carry
           105 : 4109;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           106 : 0920;  -- 	LOAD   mres16sH     ; if bit 0 set,
           107 : 211B;  -- 	SUB    m16sA        ; subtract multiplicand from result H
           108 : 1120;  -- 	STORE  mres16sH
           109 : 091C;  -- 	LOAD   m16sB
           10A : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           10B : 491A;  -- 	AND    c7FFF        ; clear msb
           10C : 111C;  -- 	STORE  m16sB
           10D : 0920;  -- 	LOAD   mres16sH     ; load result H
           10E : 600F;  -- 	SHIFT  15           ; move lsb to msb
           10F : 511C;  -- 	OR     m16sB
           110 : 111C;  -- 	STORE  m16sB        ; result L now includes carry out from H
           111 : 0920;  -- 	LOAD   mres16sH
           112 : 6011;  -- 	SHIFT  -1
           113 : 1120;  -- 	STORE  mres16sH     ; shift result H >>1
           114 : 091E;  -- 	LOAD   mcnt16s
           115 : 6FFF;  -- 	ADDI   -1           ; check counter
           116 : 38FC;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           117 : 091C;  -- 	LOAD   m16sB
           118 : 111F;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           119 : 8800;  -- 	RETURN              ; Done
           11A : 7FFF;  -- c7FFF: DW &H7FFF
           11B : 0000;  -- m16sA: DW 0 ; multiplicand
           11C : 0000;  -- m16sB: DW 0 ; multipler
           11D : 0000;  -- m16sc: DW 0 ; carry
           11E : 0000;  -- mcnt16s: DW 0 ; counter
           11F : 0000;  -- mres16sL: DW 0 ; result low
           120 : 0000;  -- mres16sH: DW 0 ; result high
           121 : 09D2;  -- 	LOAD  Zero
           122 : 115A;  -- 	STORE  dres16sR     ; clear remainder result
           123 : 1157;  -- 	STORE  d16sC1       ; clear carry
           124 : 0953;  -- 	LOAD   d16sN
           125 : 5954;  -- 	XOR    d16sD
           126 : 1155;  -- 	STORE  d16sS        ; sign determination = N XOR D
           127 : 09DE;  -- 	LOAD   Seventeen
           128 : 1156;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           129 : 0954;  -- 	LOAD   d16sD
           12A : 815B;  -- 	CALL   Abs          ; take absolute value of denominator
           12B : 1154;  -- 	STORE  d16sD
           12C : 0953;  -- 	LOAD   d16sN
           12D : 815B;  -- 	CALL   Abs          ; take absolute value of numerator
           12E : 1153;  -- 	STORE  d16sN
           12F : 0953;  -- 	LOAD   d16sN
           130 : 601F;  -- 	SHIFT  -15          ; get msb
           131 : 49D3;  -- 	AND    One          ; only msb (because shift is arithmetic)
           132 : 1158;  -- 	STORE  d16sC2       ; store as carry
           133 : 0953;  -- 	LOAD   d16sN
           134 : 6001;  -- 	SHIFT  1            ; shift <<1
           135 : 5157;  -- 	OR     d16sC1       ; with carry
           136 : 1153;  -- 	STORE  d16sN
           137 : 0956;  -- 	LOAD   d16sT
           138 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           139 : 4149;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           13A : 1156;  -- 	STORE  d16sT
           13B : 095A;  -- 	LOAD   dres16sR
           13C : 6001;  -- 	SHIFT  1            ; shift remainder
           13D : 5158;  -- 	OR     d16sC2       ; with carry from other shift
           13E : 2154;  -- 	SUB    d16sD        ; subtract denominator from remainder
           13F : 3144;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           140 : 115A;  -- 	STORE  dres16sR
           141 : 09D3;  -- 	LOAD   One
           142 : 1157;  -- 	STORE  d16sC1       ; set carry
           143 : 292F;  -- 	JUMP   Div16s_loop
           144 : 1954;  -- 	ADD    d16sD        ; add denominator back in
           145 : 115A;  -- 	STORE  dres16sR
           146 : 09D2;  -- 	LOAD   Zero
           147 : 1157;  -- 	STORE  d16sC1       ; clear carry
           148 : 292F;  -- 	JUMP   Div16s_loop
           149 : 0953;  -- 	LOAD   d16sN
           14A : 1159;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           14B : 0955;  -- 	LOAD   d16sS        ; check the sign indicator
           14C : 314E;  -- 	JNEG   Div16s_neg
           14D : 8800;  -- 	RETURN
           14E : 0959;  -- 	LOAD   dres16sQ     ; need to negate the result
           14F : 59D1;  -- 	XOR    NegOne
           150 : 6801;  -- 	ADDI   1
           151 : 1159;  -- 	STORE  dres16sQ
           152 : 8800;  -- 	RETURN	
           153 : 0000;  -- d16sN: DW 0 ; numerator
           154 : 0000;  -- d16sD: DW 0 ; denominator
           155 : 0000;  -- d16sS: DW 0 ; sign value
           156 : 0000;  -- d16sT: DW 0 ; temp counter
           157 : 0000;  -- d16sC1: DW 0 ; carry value
           158 : 0000;  -- d16sC2: DW 0 ; carry value
           159 : 0000;  -- dres16sQ: DW 0 ; quotient result
           15A : 0000;  -- dres16sR: DW 0 ; remainder result
           15B : 395E;  -- 	JPOS   Abs_r
           15C : 59D1;  -- 	XOR    NegOne       ; Flip all bits
           15D : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           15E : 8800;  -- 	RETURN
           15F : 09C1;  -- 	LOAD   AtanY
           160 : 815B;  -- 	CALL   Abs          ; abs(y)
           161 : 11C3;  -- 	STORE  AtanT
           162 : 09C0;  -- 	LOAD   AtanX        ; abs(x)
           163 : 815B;  -- 	CALL   Abs
           164 : 21C3;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           165 : 3170;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           166 : 09C0;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           167 : 316D;  -- 	JNEG   A2_R3
           168 : 8181;  -- 	CALL   A2_calc      ; Octants 1, 8
           169 : 316B;  -- 	JNEG   A2_R1n
           16A : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           16B : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           16C : 8800;  -- 	RETURN
           16D : 8181;  -- 	CALL   A2_calc      ; Octants 4, 5            
           16E : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           16F : 8800;  -- 	RETURN
           170 : 09C1;  -- 	LOAD   AtanY        ; Swap input arguments
           171 : 11C3;  -- 	STORE  AtanT
           172 : 09C0;  -- 	LOAD   AtanX
           173 : 11C1;  -- 	STORE  AtanY
           174 : 09C3;  -- 	LOAD   AtanT
           175 : 11C0;  -- 	STORE  AtanX
           176 : 397C;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           177 : 8181;  -- 	CALL   A2_calc      ; else octants 6, 7
           178 : 59D1;  -- 	XOR    NegOne
           179 : 6801;  -- 	ADDI   1            ; negate the angle
           17A : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           17B : 8800;  -- 	RETURN
           17C : 8181;  -- 	CALL   A2_calc      ; Octants 2, 3
           17D : 59D1;  -- 	XOR    NegOne
           17E : 6801;  -- 	ADDI   1            ; negate the angle
           17F : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           180 : 8800;  -- 	RETURN
           181 : 09C1;  -- 	LOAD   AtanY
           182 : 1153;  -- 	STORE  d16sN        ; Y in numerator
           183 : 09C0;  -- 	LOAD   AtanX
           184 : 1154;  -- 	STORE  d16sD        ; X in denominator
           185 : 81AD;  -- 	CALL   A2_div       ; divide
           186 : 0959;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           187 : 11C2;  -- 	STORE  AtanRatio
           188 : 111B;  -- 	STORE  m16sA
           189 : 111C;  -- 	STORE  m16sB
           18A : 81A4;  -- 	CALL   A2_mult      ; X^2
           18B : 111B;  -- 	STORE  m16sA
           18C : 09C4;  -- 	LOAD   A2c
           18D : 111C;  -- 	STORE  m16sB
           18E : 81A4;  -- 	CALL   A2_mult
           18F : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           190 : 1154;  -- 	STORE  d16sD
           191 : 09C2;  -- 	LOAD   AtanRatio
           192 : 1153;  -- 	STORE  d16sN        ; Ratio in numerator
           193 : 81AD;  -- 	CALL   A2_div       ; divide
           194 : 0959;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           195 : 111B;  -- 	STORE  m16sA        ; <= result in radians
           196 : 09C5;  -- 	LOAD   A2cd         ; degree conversion factor
           197 : 111C;  -- 	STORE  m16sB
           198 : 81A4;  -- 	CALL   A2_mult      ; convert to degrees
           199 : 11C3;  -- 	STORE  AtanT
           19A : 6017;  -- 	SHIFT  -7           ; check 7th bit
           19B : 49D3;  -- 	AND    One
           19C : 41A1;  -- 	JZERO  A2_rdwn      ; round down
           19D : 09C3;  -- 	LOAD   AtanT
           19E : 6018;  -- 	SHIFT  -8
           19F : 6801;  -- 	ADDI   1            ; round up
           1A0 : 8800;  -- 	RETURN
           1A1 : 09C3;  -- 	LOAD   AtanT
           1A2 : 6018;  -- 	SHIFT  -8           ; round down
           1A3 : 8800;  -- 	RETURN
           1A4 : 80F8;  -- 	CALL   Mult16s
           1A5 : 0920;  -- 	LOAD   mres16sH
           1A6 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           1A7 : 1120;  -- 	STORE  mres16sH
           1A8 : 091F;  -- 	LOAD   mres16sL
           1A9 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           1AA : 49E7;  -- 	AND    LowByte
           1AB : 5120;  -- 	OR     mres16sH     ; combine high and low words of result
           1AC : 8800;  -- 	RETURN
           1AD : 09DB;  -- 	LOAD  Nine            ; loop 8 times (256 = 2^8)
           1AE : 11C3;  -- 	STORE  AtanT
           1AF : 09C3;  -- 	LOAD   AtanT
           1B0 : 6FFF;  -- 	ADDI   -1
           1B1 : 39B4;  -- 	JPOS   A2_DN        ; not done; continue shifting
           1B2 : 8121;  -- 	CALL   Div16s       ; do the standard division
           1B3 : 8800;  -- 	RETURN
           1B4 : 11C3;  -- 	STORE  AtanT
           1B5 : 0953;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           1B6 : 6001;  -- 	SHIFT  1
           1B7 : 5953;  -- 	XOR    d16sN        ; if the sign changed,
           1B8 : 31BC;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           1B9 : 5953;  -- 	XOR    d16sN        ; get back shifted version
           1BA : 1153;  -- 	STORE  d16sN
           1BB : 29AF;  -- 	JUMP   A2_DL
           1BC : 0954;  -- 	LOAD   d16sD
           1BD : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           1BE : 1154;  -- 	STORE  d16sD
           1BF : 29AF;  -- 	JUMP   A2_DL
           1C0 : 0000;  -- AtanX:      DW 0
           1C1 : 0000;  -- AtanY:      DW 0
           1C2 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           1C3 : 0000;  -- AtanT:      DW 0        ; temporary value
           1C4 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           1C5 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           1C6 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           1C7 : FF9C;  -- XGoal:    DW -100
           1C8 : 01F4;  -- YGoal:	  DW 500
           1C9 : 0000;  -- dX:       DW 0
           1CA : 0000;  -- dY:       DW 0
           1CB : 0000;  -- ThetaGoal: DW 0
           1CC : 0000;  -- X:		DW 0
           1CD : 0000;  -- Y:		DW	0
           1CE : 0000;  -- DistErr: DW 0
           1CF : 0000;  -- LSpeed: DW 0
           1D0 : 0000;  -- RSpeed: DW 0
           1D1 : FFFF;  -- NegOne:   DW -1
           1D2 : 0000;  -- Zero:     DW 0
           1D3 : 0001;  -- One:      DW 1
           1D4 : 0002;  -- Two:      DW 2
           1D5 : 0003;  -- Three:    DW 3
           1D6 : 0004;  -- Four:     DW 4
           1D7 : 0005;  -- Five:     DW 5
           1D8 : 0006;  -- Six:      DW 6
           1D9 : 0007;  -- Seven:    DW 7
           1DA : 0008;  -- Eight:    DW 8
           1DB : 0009;  -- Nine:     DW 9
           1DC : 000A;  -- Ten:      DW 10
           1DD : 0010;  -- Sixteen:  DW 16
           1DE : 0011;  -- seventeen: DW 17
           1DF : 0001;  -- Mask0:    DW &B00000001
           1E0 : 0002;  -- Mask1:    DW &B00000010
           1E1 : 0004;  -- Mask2:    DW &B00000100
           1E2 : 0008;  -- Mask3:    DW &B00001000
           1E3 : 0010;  -- Mask4:    DW &B00010000
           1E4 : 0020;  -- Mask5:    DW &B00100000
           1E5 : 0040;  -- Mask6:    DW &B01000000
           1E6 : 0080;  -- Mask7:    DW &B10000000
           1E7 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           1E8 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           1E9 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           1EA : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           1EB : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           1EC : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           1ED : 00B4;  -- Deg180:   DW 180       ; 180
           1EE : 010E;  -- Deg270:   DW 270       ; 270
           1EF : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           1F0 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           1F1 : FF9C;  -- RSlow:    DW -100
           1F2 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           1F3 : FEA2;  -- RMid:     DW -350
           1F4 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           1F5 : FE0C;  -- RFast:    DW -500
           1F6 : 0046;  -- MinBatt:  DW 70       ; 14.0V - minimum safe battery voltage
           1F7 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           1F8 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
